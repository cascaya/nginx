---

- name: Install the selinux python module
  tags: nginx
  yum: name=libselinux-python state=present
  when: ansible_os_family == "RedHat"

- name: Copy the epel packages 
  tags: nginx
  copy: src=epel.repo dest=/etc/yum.repos.d/epel_ansible.repo
  when: ansible_os_family == "RedHat"

- name: Install the nginx packages 
  tags: nginx
  yum: name={{ item }} state=present
  with_items: nginx_redhat_pkg
  when: ansible_os_family == "RedHat"

- name: Install the nginx packages 
  tags: nginx
  apt: name={{ item }} state=present update_cache=yes
  with_items: nginx_ubuntu_pkg
  environment: env
  when: ansible_os_family == "Debian"

- name: Create the directories for site specific configurations
  tags: nginx
  file: path=/etc/nginx/{{ item }} state=directory owner=root group=root mode=0755
  with_items:
    - "sites-available"
    - "sites-enabled"

- name: Copy the nginx configuration file 
  tags: nginx
  template: 
    src={{ nginx_config.src|default('nginx.conf.j2') }} 
    dest={{ nginx_config.dest|default('/etc/nginx/nginx.conf')}}    
    owner={{ nginx_config.owner|default('root') }} 
    group={{ nginx_config.group|default('root') }}
    mode={{ nginx_config.mode|default('0644') }}
  notify: 
   - restart nginx

- name: get ansible managed sites
  tags: nginx
  shell:
    free_form=yes
    grep -rl '#Ansible managed' --exclude='*nginx.conf*' --exclude='*default*' /etc/nginx/ ; if [ $? == 1 ]; then exit 0; fi 
  register: nginx_sites_configured

- name: remove old sites 
  tags: nginx
  file: 
    state=absent
    path={{item}}
  with_items: nginx_sites_configured.stdout_lines

- name: Copy the nginx default configuration file 
  tags: nginx
  template: src=default.conf.j2 dest=/etc/nginx/conf.d/default.conf

- name: Copy the nginx default site configuration file 
  tags: nginx
  template: src=default.j2 dest=/etc/nginx/sites-available/default

- name: Create the link for site enabled specific configurations
  tags: nginx
  file: path=/etc/nginx/sites-enabled/default state=link src=/etc/nginx/sites-available/default 


- name: Create the configurations for sites
  tags: nginx
  template: 
    src="{{ item['server']['src']|default('site.j2') }}" 
    dest="/etc/nginx/conf.d/{{item['server']['file_name']}}.conf"
    owner={{ item['server']['owner']|default('root') }} 
    group={{ item['server']['group']|default('root') }}
    mode={{ item['server']['mode']|default('0644') }}
  with_items: nginx_sites
  when: nginx_sites|lower != 'none'
  notify: 
   - reload nginx

- name: start the nginx service
  service: name=nginx state=started enabled=yes
  #TODO: remove sites before create new ones 
